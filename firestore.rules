
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow delete: if false;
    }

    match /patients/{patientDocId} {
      allow create: if request.auth != null &&
                       request.resource.data.caregiverUid == request.auth.uid;

      allow read: if request.auth != null &&
                     (
                       resource.data.caregiverUid == request.auth.uid ||
                       (
                         // Check if the user document exists and then check the role
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                       )
                     );

      allow update: if request.auth != null &&
                       (
                         ( // Caregiver can update their patient's record
                           resource.data.caregiverUid == request.auth.uid
                         )
                         // Doctors can no longer directly update feedback on the main patient document.
                         // Feedback is now in a subcollection. This part of the rule might be
                         // simplified or removed if no other top-level patient fields are updated by doctors.
                         // For now, keeping a restrictive version for any potential doctor updates on main doc.
                         // If doctors ONLY add to subcollections, this doctor-specific update clause
                         // on the main patient doc might become redundant unless they update specific top-level fields.
                         // The provided rules from previous interaction made doctors add to subcollection.
                         // Let's assume for now doctors might still update a limited set of fields on patient doc directly if needed.
                         // If doctors *only* interact via subcollections, this specific 'Medical Doctor' update part might be removed or changed.
                         // For this fix, we are focusing on read access. The update rule regarding 'doctorFeedbackNotes' etc.
                         // on the main patient document is likely obsolete now that feedback is a subcollection.
                         // I will leave the original structure for doctor updates on the patient document for now,
                         // but comment out the fields that were moved to the subcollection.
                         // This needs careful review based on actual fields a doctor might update on the patient doc.
                         /*
                         ||
                         (
                           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                           // These fields are now in patientFeedbacks subcollection
                           // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['doctorFeedbackNotes', 'feedbackStatus', 'doctorId', 'doctorName', 'feedbackDateTime'])
                           // If doctors can update other top-level patient fields, list them here.
                           // For example, if a doctor can update 'feedbackStatus' on the main doc (unlikely with subcollection)
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['feedbackStatus']) // Example
                         )
                         */
                       );

      allow delete: if request.auth != null &&
                       resource.data.caregiverUid == request.auth.uid;

      // Rules for patientFeedbacks subcollection
      match /patientFeedbacks/{feedbackId} {
        allow create: if request.auth != null &&
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                         request.resource.data.doctorId == request.auth.uid &&
                         request.resource.data.patientId == patientDocId;
        allow read: if request.auth != null &&
                       (
                         // Caregiver of the patient can read feedback
                         get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid ||
                         // Doctor who is authenticated can read feedback (any feedback for any patient they have access to)
                         (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                         )
                       );
        allow update, delete: if false; // Generally, feedback is immutable or handled by specific roles/logic
      }

      // Rules for testRequests subcollection
      match /testRequests/{requestId} {
        allow create: if request.auth != null && // Doctor requesting the test
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                         request.resource.data.requestingDoctorId == request.auth.uid &&
                         request.resource.data.patientId == patientDocId;

        allow read: if request.auth != null && // Caregiver or Doctor
                       (
                         get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid ||
                         (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                         )
                       );
        allow update: if request.auth != null && // Caregiver fulfilling the test
                         get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resultNotes', 'resultFileNames', 'fulfilledAt']);
        allow delete: if false; // Test requests generally shouldn't be deleted directly
      }
    }

    // Notifications collection (root level)
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && resource.data.recipientUid == request.auth.uid;
      allow create: if false; // Created by backend functions
      allow delete: if request.auth != null && resource.data.recipientUid == request.auth.uid; // User can delete their own notifications
    }
  }
}
