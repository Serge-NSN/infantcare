
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Allow any authenticated user to create their own user document
      allow delete: if false; // Generally, users should not delete their own accounts directly
    }

    // Rules for the 'patients' collection
    match /patients/{patientDocId} {
      // Caregivers can create patient records if they are authenticated and set themselves as caregiverUid
      allow create: if request.auth != null &&
                       request.resource.data.caregiverUid == request.auth.uid;

      // Authenticated users can read patient data if:
      // 1. They are the caregiver assigned to the patient OR
      // 2. Their user document in /users has role 'Medical Doctor'
      allow read: if request.auth != null &&
                     (
                       resource.data.caregiverUid == request.auth.uid ||
                       (
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                       )
                     );

      // Caregivers can update patient records they manage.
      // Doctors can update specific fields related to their feedback, or request tests.
      allow update: if request.auth != null &&
                       (
                         // Caregiver can update their own patient records
                         (
                           resource.data.caregiverUid == request.auth.uid
                         ) ||
                         // Medical Doctors can update specific patient fields (e.g. if test results are directly added to patient doc)
                         // This rule might need refinement based on exact fields doctors are allowed to update on the main patient doc.
                         // Currently, feedback and test requests are in subcollections.
                         // This part of the rule for doctors updating the main patient doc might be largely unused if all their actions
                         // are on subcollections. It's kept minimal here. Consider if doctors need to update 'feedbackStatus' on main doc.
                         (
                           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                           // Example: Allow doctor to update feedbackStatus or if they are assigned as the main doctorId
                           (
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['feedbackStatus', 'uploadedFileNames'])
                             // If you have a doctorId field on the patient doc directly:
                             // (resource.data.doctorId == null || resource.data.doctorId == "" || resource.data.doctorId == request.auth.uid)
                           )
                         )
                       );

      // Caregivers can delete patient records they manage.
      allow delete: if request.auth != null &&
                       resource.data.caregiverUid == request.auth.uid;

      // Subcollection for patient feedbacks
      match /patientFeedbacks/{feedbackId} {
        // Doctors can create feedback entries.
        // The feedback document should contain doctorId, doctorName, patientId.
        allow create: if request.auth != null &&
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                         request.resource.data.doctorId == request.auth.uid &&
                         request.resource.data.patientId == patientDocId;

        // Caregivers of the patient and any Medical Doctor can read feedback.
        allow read: if request.auth != null &&
                       (
                         get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid ||
                         (
                           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                         )
                       );
        // Feedback is generally immutable once created by a doctor.
        allow update: if false;
        allow delete: if false; // Or allow deleting by the doctor who created it if needed
                         // request.auth != null && resource.data.doctorId == request.auth.uid;
      }

      // Subcollection for test requests
      match /testRequests/{requestId} {
        // Doctors can create test requests.
        // The request document should contain requestingDoctorId.
        allow create: if request.auth != null &&
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor' &&
                         request.resource.data.requestingDoctorId == request.auth.uid &&
                         request.resource.data.patientId == patientDocId;

        // Caregivers of the patient and the requesting Doctor can read test requests.
        allow read: if request.auth != null &&
                       (
                         get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid ||
                         resource.data.requestingDoctorId == request.auth.uid || // doctor who requested
                          ( // Any doctor can view requests for now, refine if needed
                           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Medical Doctor'
                          )
                       );

        // Caregivers can update test requests (e.g., to mark as fulfilled, add results).
        // Doctor who requested it can update (e.g. add notes after reviewing fulfilled test)
        allow update: if request.auth != null &&
                       (
                         // Caregiver fulfilling the request
                         (
                           get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid &&
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'resultNotes', 'resultFileNames', 'fulfilledAt'])
                         ) ||
                         // Doctor reviewing the fulfilled request
                         (
                           resource.data.requestingDoctorId == request.auth.uid &&
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'doctorNotes']) &&
                           resource.data.status == 'Fulfilled' // Doctor can only add notes after caregiver fulfills
                         )
                       );
        // Doctors or Caregivers might delete pending requests. Define as needed.
        allow delete: if request.auth != null &&
                         (
                            get(/databases/$(database)/documents/patients/$(patientDocId)).data.caregiverUid == request.auth.uid ||
                            resource.data.requestingDoctorId == request.auth.uid
                         ) && resource.data.status == 'Pending';
      }
    }

    // Rules for the 'notifications' collection (root collection)
    match /notifications/{notificationId} {
      // Only the recipient can read their notifications.
      allow read: if request.auth != null && resource.data.recipientUid == request.auth.uid;
      // Only the recipient can mark their notifications as read (update the isRead field).
      allow update: if request.auth != null &&
                       resource.data.recipientUid == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      // Notifications are created by Cloud Functions (Admin SDK), not directly by users.
      allow create: if false;
      allow delete: if false; // Or allow recipient to delete: resource.data.recipientUid == request.auth.uid;
    }
  }
}

